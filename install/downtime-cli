#!/usr/bin/env python3
import os
import sys
import time
import subprocess
sys.path.append("/usr/bin/downtime/")
import dbget
def register():
    print("Ready to Register.")
    os.system("touch /tmp/registration.downtime.lock")
    tcyc = 0
    while tcyc != 30:
        if os.path.exists("/tmp/registration.downtime.lock") == False:
            print("Registration Complete.")
            print("Restarting Downtime...")
            os.system("systemctl restart downtime")
            return 0
        time.sleep(1)
        tcyc = tcyc + 1
    print("Registration Timeout.")
    os.system("rm -rf /tmp/registration.downtime.lock")
def watch(service, restartop):
    cmdmsg = "Adding " + service + " to watchlist..."
    print(cmdmsg)
    #TODO: dont allow multiple of the same service to be added
    try:
        f = open("/usr/bin/downtime/db/services.watchlist", 'a')
        f.write(service)
        f.write("\n")
        f.close()
        if restartop == 0:
            os.system("systemctl restart downtime")
        print("Added.")
        return 0
    except:
        print("Downtime experienced an unknown error.")
        return 1
def unwatch(service, restartop):
    cmdmsg = "Removing " + service + " from watchlist..."
    print(cmdmsg)
    try:
        newsv = []
        f = open("/usr/bin/downtime/db/services.watchlist", 'r')
        services = f.readlines()
        services = [x.replace('\n', '') for x in services]
        f.close()
        for i in services:
            if i != service:
                newsv.append(i)
        f = open("/usr/bin/downtime/db/services.watchlist", 'w')
        for i in newsv:
            f.write(i)
            f.write("\n")
        f.close()
        if restartop == 0:
            os.system("systemctl restart downtime")
        print("Removed.")
        return 0
    except:
        print("Downtime experienced an unknown error.")
        return 1
#check if downtime service is running
try:
    if subprocess.getoutput("systemctl is-active downtime") != "active":
        print("Starting Downtime...")
        os.system("systemctl start downtime")
        time.sleep(5)
        if subprocess.getoutput("systemctl is-active downtime") != "active":
            print("Downtime Failed to Start!")
            exit()
    elif sys.argv[1] == "update":
        os.system("bash /usr/bin/downtime/update-soft.sh")
    elif sys.argv[1] == "register":
        register()
    elif sys.argv[1] == "watch" and sys.argv[2]:
        watch(sys.argv[2], 0)
    elif sys.argv[1] == "unwatch" and sys.argv[2]:
        unwatch(sys.argv[2], 0)
    elif sys.argv[1] == "watch" and sys.argv[2] and sys.argv[3]:
        if sys.argv[3] == "norestart":
            watch(sys.argv[2], 1)
    elif sys.argv[1] == "unwatch" and sys.argv[2]:
        if sys.argv[3] == "norestart":
            unwatch(sys.argv[2], 1)
    else:
        print("Arguments not recognised.")
except:
    print("Arguments not recognised.")
    exit()
